package com.yuxie.smsbomb.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuxie.smsbomb.bean.SmsApi;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMS_API".
*/
public class SmsApiDao extends AbstractDao<SmsApi, Long> {

    public static final String TABLENAME = "SMS_API";

    /**
     * Properties of entity SmsApi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property ParameterBefore = new Property(3, String.class, "parameterBefore", false, "PARAMETER_BEFORE");
        public final static Property ParameterAfter = new Property(4, String.class, "parameterAfter", false, "PARAMETER_AFTER");
        public final static Property ResultOk = new Property(5, String.class, "resultOk", false, "RESULT_OK");
    }


    public SmsApiDao(DaoConfig config) {
        super(config);
    }
    
    public SmsApiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMS_API\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"URL\" TEXT," + // 2: url
                "\"PARAMETER_BEFORE\" TEXT," + // 3: parameterBefore
                "\"PARAMETER_AFTER\" TEXT," + // 4: parameterAfter
                "\"RESULT_OK\" TEXT);"); // 5: resultOk
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMS_API\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmsApi entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String parameterBefore = entity.getParameterBefore();
        if (parameterBefore != null) {
            stmt.bindString(4, parameterBefore);
        }
 
        String parameterAfter = entity.getParameterAfter();
        if (parameterAfter != null) {
            stmt.bindString(5, parameterAfter);
        }
 
        String resultOk = entity.getResultOk();
        if (resultOk != null) {
            stmt.bindString(6, resultOk);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmsApi entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String parameterBefore = entity.getParameterBefore();
        if (parameterBefore != null) {
            stmt.bindString(4, parameterBefore);
        }
 
        String parameterAfter = entity.getParameterAfter();
        if (parameterAfter != null) {
            stmt.bindString(5, parameterAfter);
        }
 
        String resultOk = entity.getResultOk();
        if (resultOk != null) {
            stmt.bindString(6, resultOk);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SmsApi readEntity(Cursor cursor, int offset) {
        SmsApi entity = new SmsApi( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parameterBefore
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parameterAfter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // resultOk
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmsApi entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParameterBefore(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParameterAfter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResultOk(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmsApi entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmsApi entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmsApi entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
